# Function Name: generate_next_row
# Function Description: go through the whole line, and combined all the single bits generated by function "generate_next_bit()"
# Function Input
#  - bit_rule: the rule written in 8 bit string.
#  - pre_row:  the previous row of string that used to generate next one.

# Function Output: return a row of string that means the next row.

def generate_next_bit(bit_rule,left,mid,right):

    position = left*4 + mid*2 + right;
    if bit_rule[position] == '1' :
    	return '1'
    else :
     	return '0'
    
def generate_next_row(pre_row,bit_rule):

    length = len(pre_row)
    next_row = '0'
    for i in range(length):
    	print "in row:",i 
        if i == 0 :
    		left = 0
    		mid = pre_row[i]
    		right = pre_row[i+1]
    	if i == length - 1:
    		left = pre_row[i-1]
    		mid = pre_row[i]
    		right = 0
    	else :
    		left = pre_row[i-1]
    		mid = pre_row[i]
    		right = pre_row[i+1]
    	print left,mid,right
        print "next row bit:\t",
        row_element = generate_next_bit(bit_rule,int(left),int(mid),int(right))
        print row_element
        next_row = next_row + row_element
    print next_row
    return next_row 
generate_next_row("0001000","01111000")


